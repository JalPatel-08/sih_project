import Head from 'next/head';
import { useSession } from 'next-auth/react';
import { useEffect, useState, useCallback } from 'react';
import { motion } from 'framer-motion';

export default function Dashboard() {
  const { data: session, update } = useSession();
  const [connections, setConnections] = useState([]);
  const [name, setName] = useState('');
  const [editing, setEditing] = useState(false);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [quote, setQuote] = useState('');
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    if (session?.user) {
      setName(session.user.name || '');
    }
  }, [session]);

  useEffect(() => {
    async function fetchConnections() {
      setLoading(true);
      try {
        const res = await fetch('/api/connections/users');
        if (!res.ok) throw new Error('Failed to fetch connections');
        const data = await res.json();
        setConnections(data.connections || []);
      } catch (e) {
        setError('Could not load connections');
      } finally {
        setLoading(false);
      }
    }
    fetchConnections();
  }, []);

  // Fetch a random motivational quote
  useEffect(() => {
    async function fetchQuote() {
      try {
        const res = await fetch('https://api.quotable.io/random');
        const data = await res.json();
        setQuote(data.content);
      } catch {
        setQuote('Welcome to your dashboard!');
      }
    }
    fetchQuote();
  }, []);

  // Live clock
  useEffect(() => {
    const interval = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(interval);
  }, []);

  const handleNameChange = (e) => setName(e.target.value);

  const saveName = async () => {
    setSaving(true);
    setError('');
    try {
      const userId = session?.user?.id;
      if (!userId) throw new Error('User ID not found');
      const res = await fetch(`/api/users?id=${userId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name }),
      });
      if (!res.ok) throw new Error('Failed to update name');
      if (update) await update();
      setEditing(false);
    } catch (e) {
      setError('Could not update name');
    } finally {
      setSaving(false);
    }
  };

  if (!session) return null;

  return (
    <div className="min-h-screen">
      <Head>
        <title>Dashboard | CampusConnect</title>
      </Head>
      <div className="page-container">
        <div className="page-header">
          <h1 className="page-title">Dashboard</h1>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* Profile Card */}
          <div className="card p-6 animate-fade-in">
            <div className="flex flex-col items-center gap-4">
              <img
                src={session.user.image || '/default-profile.png'}
                alt="Profile"
                className="avatar w-24 h-24"
              />
              <div className="flex flex-col items-center gap-2 w-full">
                {editing ? (
                  <div className="flex flex-col items-center gap-2 w-full">
                    <input
                      className="input text-center"
                      value={name}
                      onChange={handleNameChange}
                      disabled={saving}
                    />
                    <div className="flex gap-2 mt-2">
                      <button
                        className="btn btn-primary btn-sm hover-lift"
                        onClick={saveName}
                        disabled={saving}
                      >
                        {saving ? 'Saving...' : 'Save'}
                      </button>
                      <button
                        className="btn btn-secondary btn-sm hover-lift"
                        onClick={() => { setEditing(false); setName(session.user.name || ''); }}
                        disabled={saving}
                      >
                        Cancel
                      </button>
                    </div>
                    {error && <div className="alert alert-error mt-2">{error}</div>}
                  </div>
                ) : (
                  <>
                    <div className="text-xl font-semibold text-slate-800 dark:text-white">{name}</div>
                    <button
                      className="btn-link text-sm"
                      onClick={() => setEditing(true)}
                    >
                      Change Name
                    </button>
                  </>
                )}
              </div>
              <div className="mt-2 w-full text-center">
                <div className="text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Total Connections</div>
                {loading ? (
                  <div className="loading-spinner-sm mx-auto"></div>
                ) : error ? (
                  <div className="text-red-600 dark:text-red-400">{error}</div>
                ) : (
                  <div className="badge badge-lg badge-primary">{connections.length}</div>
                )}
              </div>
            </div>
          </div>
          
          {/* Main Content */}
          <div className="md:col-span-2 space-y-6">
            {/* Welcome & Clock */}
            <div className="card p-6 animate-fade-in">
              <div className="flex flex-col md:flex-row items-center justify-between gap-4">
                <div>
                  <h2 className="text-xl font-bold text-slate-900 dark:text-white mb-2">Welcome, {name}!</h2>
                  <p className="text-slate-600 dark:text-slate-300">{quote}</p>
                </div>
                <div className="flex flex-col items-center">
                  <span className="text-3xl font-mono text-slate-800 dark:text-slate-200">{time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                  <span className="text-sm text-slate-500 dark:text-slate-400">{time.toLocaleDateString()}</span>
                </div>
              </div>
            </div>
            
            {/* Quick Actions */}
            <div className="card p-6 animate-fade-in">
              <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4">Quick Actions</h3>
              <div className="flex flex-wrap gap-3 justify-center">
                <a href="/events" className="btn btn-primary hover-lift">Events</a>
                <a href="/resources" className="btn btn-success hover-lift">Resources</a>
                <a href="/jobs" className="btn btn-warning hover-lift">Jobs</a>
                <a href="/posts" className="btn btn-primary hover-lift">Posts</a>
                <a href="/connections" className="btn btn-info hover-lift">Connections</a>
                <a href="/profile" className="btn btn-secondary hover-lift">Profile</a>
              </div>
            </div>
            
            {/* Upcoming Events & News */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="card p-6 animate-fade-in">
                <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4">Upcoming Events</h3>
                <UpcomingEvents />
              </div>
              
              <div className="card p-6 animate-fade-in">
                <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4">Campus News</h3>
                <ul className="text-slate-600 dark:text-slate-300 space-y-2">
                  <li className="flex items-center gap-2">
                    <span className="badge badge-blue">NEW</span>
                    Tech Talk this Friday!
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="badge badge-green">OPEN</span>
                    Job fair registrations open now
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="badge badge-purple">UPDATE</span>
                    Resource library updated with new materials
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="badge badge-amber">CHECK</span>
                    New connection requests awaiting response
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        
        {/* Footer */}
        <div className="text-center text-slate-500 dark:text-slate-400 text-sm mt-8">
          &copy; {new Date().getFullYear()} CampusConnect. All rights reserved.
        </div>
      </div>
    </div>
  );
}

function UpcomingEvents() {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const fetchEvents = useCallback(async () => {
    setLoading(true);
    setError('');
    try {
      const res = await fetch('/api/events');
      if (!res.ok) throw new Error('Failed to fetch events');
      const data = await res.json();
      // Filter for upcoming events (date in future)
      const now = new Date();
      const upcoming = (Array.isArray(data) ? data : data.data || [])
        .filter(ev => new Date(ev.date) > now);
      // Sort by soonest
      upcoming.sort((a, b) => new Date(a.date) - new Date(b.date));
      setEvents(upcoming.slice(0, 3));
    } catch (e) {
      setError('Could not load events');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchEvents();
  }, [fetchEvents]);

  if (loading) {
    return <div className="flex justify-center p-4"><div className="loading-spinner"></div></div>;
  }

  if (error) {
    return <div className="alert alert-error">{error}</div>;
  }

  if (events.length === 0) {
    return <div className="text-slate-500 dark:text-slate-400 text-center p-4">No upcoming events</div>;
  }

  return (
    <div className="space-y-3">
      {events.map(ev => (
        <div key={ev._id} className="p-3 border border-slate-200 dark:border-slate-700 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors">
          <div className="font-medium text-slate-900 dark:text-white">{ev.title}</div>
          <div className="text-slate-600 dark:text-slate-400 text-sm line-clamp-1">{ev.description}</div>
          <div className="text-slate-500 dark:text-slate-500 text-xs mt-1">{new Date(ev.date).toLocaleString()}</div>
        </div>
      ))}
    </div>
  );
}
